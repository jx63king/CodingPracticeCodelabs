https://techdevguide.withgoogle.com/paths/foundational/find-longest-word-in-dictionary-that-subsequence-of-given-string/#code-challenge


The Challenge
Given a string S and a set of words D, find the longest word in D that is a subsequence of S.

Word W is a subsequence of S if some number of characters, possibly zero, can be deleted from S to form W, without reordering the remaining characters.

Note: D can appear in any format (list, hash table, prefix tree, etc.

For example, given the input of S = "abppplee" and D = {"able", "ale", "apple", "bale", "kangaroo"} the correct output would be "apple"

The words "able" and "ale" are both subsequences of S, but they are shorter than "apple".
The word "bale" is not a subsequence of S because even though S has all the right letters, they are not in the right order.
The word "kangaroo" is the longest word in D, but it isn't a subsequence of S.

My thought: 
1) find the longest in D 
2) check if all char is in string S 
3) if they are, return 
4) if not all char is in string S 
5) move onto the next longest word 
6) repeat 

Possible data structure: 2-D array OR map


a-> [("able", 0), ("ale", 0), ("apple", 0)]
b-> [("bale", 0)]
k-> [("kangaroo", 0)]


Code Snip: 
#!/usr/bin/env python
import collections
import sys
def find_longest_word_in_string(letters, words): 
    letter_positions = collections.defaultdict(list)
    for index, letter in enumerate(letters): 
        letter_positions[letter].append(index)
    # lambda: https://realpython.com/python-lambda/
    for word in sorted(words, key=lambda w: len(w), reverse=True): 
        pos = 0
        for letter in word: 
            if letter not in letter_positions: 
                break
            pos = possible_positions[0]+1
            else: 
                return word
# please check https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/
if __name__ == '__main__': 
    print subdict(sys.argv[1], sys.argv[2:])
